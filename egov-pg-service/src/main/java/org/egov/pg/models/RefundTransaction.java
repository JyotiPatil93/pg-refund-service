package org.egov.pg.models;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.*;
import org.egov.pg.constants.TransactionAdditionalFields;
import org.egov.pg.web.models.User;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.List;
import java.util.Map;

/**
 * Transaction object representing a transaction
 */

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Builder
@ToString
public class RefundTransaction {

	@JsonProperty("tenantId")
	@NotNull
	@Size(min = 2, max = 50)
	private String tenantId;

	/**
	 * Transaction Amount, preferably rounded off to two decimal places
	 */
	@JsonProperty("txnAmount")
	@NotNull
	@Size(min = 1)
	private String txnAmount;

	/**
	 * Transaction Amount, preferably rounded off to two decimal places
	 */
	@JsonProperty("refundAmount")
	@NotNull
	@Size(min = 1)
	private String refundAmount;

	/**
	 * Gateway to be used to perform this transaction Should be among the list of
	 * valid & active gateways returned by API
	 */
	@JsonProperty("gateway")
	@NotNull
	@Size(min = 2)
	private String gateway;

	/**
	 * Generated by the app, after transaction is initiated
	 */
	@JsonProperty("txnRefundId")
	private String txnRefundId;

	@JsonProperty("txnId")
	private String txnId;

	/**
	 * Represents the current status of a transaction
	 */
	@JsonProperty("txnStatus")
	private String txnStatus;

	/**
	 * Brief status message for the transaction
	 */
	@JsonProperty("txnStatusMsg")
	private String txnStatusMsg;

	/**
	 * Transaction ID, returned by the payment gateway
	 */
	@JsonProperty("gatewayTxnId")
	private String gatewayTxnId;

	/**
	 * Transaction ID, returned by the payment gateway
	 */
	@JsonProperty("gatewayRefundTxnId")
	private String gatewayRefundTxnId;

	/**
	 * Payment Gateway Specific RAW status code
	 */
	@JsonProperty("gatewayRefundStatusCode")
	private String gatewayRefundStatusCode;

	/**
	 * Payment Gateway Specific RAW status message
	 */
	@JsonProperty("gatewayRefundStatusMsg")
	private String gatewayRefundStatusMsg;

	@JsonProperty("auditDetails")
	private AuditDetails auditDetails;

	@JsonProperty("additionalDetails")
	private Object additionalDetails;

	/**
	 * Entire RAW payment gateway response
	 */
	@JsonIgnore
	private Object responseJson;

	/**
	 * Current status of the transaction
	 */
	public enum TxnStatusEnum {
		SUCCESS("SUCCESS"),

		FAILURE("FAILURE"),

		PENDING("PENDING");

		private String value;

		TxnStatusEnum(String value) {
			this.value = value;
		}

		@JsonCreator
		public static TxnStatusEnum fromValue(String text) {
			for (TxnStatusEnum b : TxnStatusEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		@Override
		@JsonValue
		public String toString() {
			return String.valueOf(value);
		}
	}
}
